#!/bin/bash

stuff() {
    echo "#include <stdio.h>"
    echo "int main() {"
    while read data; do
        echo "$data"
    done
    echo "return 0; }"
}

sed 's/ //g' | \
sed 's/\t//g' | \
sed 's/};/}/g' | \
sed '/[+-]=/b; s/\([a-zA-Z0-9]*\)=/int \1=/g' | \
sed 's/\([a-zA-Z0-9]*\)\([+-]\)=/\1=\1\2/g' | \
sed 's/!\([^;]*\)/printf("%d\\\\n",\1)/g' | \
sed 's/?\([^{]*\)/if(\1)/g' | \
tr '\n' ' ' | \
sed 's/\([^;]\)}/\1;}/g' | \
sed 's/$/\n/' | \
stuff | \
gcc -xc -

# TODO
# - Optimization? Compilation time vs runtime
# - ultraquiet, all gcc-output would ruin the test results
# - Fix the scoping issue; Maybe preprocess all variables to get them to global
#   scope?

