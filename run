#!/bin/bash

stuff() {
    echo "#include <stdio.h>"
    echo "int main() {"
    while read data; do
        echo "$data"
    done
    echo "return 0; }"
}

tr '\n' ' ' | \
sed 's/;/;\n/g' | \
sed 's/ //g' | \
sed 's/\t//g' | \
./prep.py | \
sed 's/};/}/g' | \
sed 's/\([a-zA-Z0-9]*\)\([+-]\)=/\1=\1\2/g' | \
sed 's/?\([^{]*\)/if(0 == \1)/g' | \
tr '\n' ' ' | \
sed 's/}/;}/g' | \
sed 's/$/\n/' | \
sed 's/!\([^;]*\)/printf("%d\\\\n",\1)/g' | \
stuff | \
gcc -xc -o exploit - > /dev/null
./exploit

# TODO
# - Optimization? Compilation time vs runtime
# - Fix the scoping issue; Maybe preprocess all variables to get them to global
#   scope?

