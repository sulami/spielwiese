#!/usr/bin/python

from sys import stdin

def visit(map, x, y, paths, visited):
    if (x,y) not in visited and (map[y][x] == '-' or map[y][x] == 'S'):
        visited.add((x, y))
        p = []
        if x < len(map[0]) - 1:
            n = visit(map, x+1, y, paths[:-1] + [paths[-1] + 'E'], visited)
            if n != []:
                p += n
        if y > 0:
            n = visit(map, x, y-1, paths[:-1] + [paths[-1] + 'N'], visited)
            if n != []:
                p += n
        if y < len(map) - 1:
            n = visit(map, x, y+1, paths[:-1] + [paths[-1] + 'S'], visited)
            if n != []:
                p += n
        if x > 0:
            n = visit(map, x-1, y, paths[:-1] + [paths[-1] + 'W'], visited)
            if n != []:
                p += n
        return p

    elif (x,y) not in visited and map[y][x] == 'F':
        return paths

    else: # Can't go here, or already been here.
        return []

def find_start(map):
    for y in range(len(map)):
        for x in range(len(map[y])):
            if map[y][x] == 'S':
                return (y,x)

def main():
    map = []

    for line in stdin:
        if line != '\n':
            map.append(line[:-1]) # Get rid of the newlines.

    (y,x) = find_start(map)

    results = visit(map, x, y, [""], set())

    r = sorted([(len(r),r) for r in results])[0][1]
    for s in r:
        print(s)

if __name__ == '__main__':
    main()

