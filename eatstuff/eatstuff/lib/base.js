// Generated by CoffeeScript 1.10.0
(function() {
  var Food, addCheckbox, addFood,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  addCheckbox = function(name) {
    var elem;
    elem = $("<div class='item'> <div class='ui checkbox'> <input name='" + name + "' type='checkbox' class='ec' id='ec-" + name + "'> <label>" + name + "</label> </div> </div>");
    return $("div#eatingClasses").append(elem);
  };

  Food = (function() {
    function Food() {
      var forbiddenIn, name1;
      name1 = arguments[0], forbiddenIn = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.name = name1;
      this.forbiddenIn = forbiddenIn;
      this.allowed = true;
    }

    Food.prototype.forbidden = function(ec) {
      return indexOf.call(this.forbiddenIn, ec) >= 0;
    };

    Food.prototype.forbid = function() {
      this.allowed = false;
      return $("div#forbidden").append($("div#food-" + this.name));
    };

    Food.prototype.allow = function() {
      this.allowed = true;
      return $("div#allowed").append($("div#food-" + this.name));
    };

    Food.prototype.toggle = function() {
      if (this.allowed) {
        return this.forbid();
      } else {
        return this.allow();
      }
    };

    Food.prototype.check = function(ecs) {
      var ec, newStatus;
      newStatus = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = ecs.length; i < len; i++) {
          ec = ecs[i];
          results.push(this.forbidden(ec));
        }
        return results;
      }).call(this);
      if (indexOf.call(newStatus, true) >= 0 && this.allowed) {
        return this.forbid();
      } else if (indexOf.call(newStatus, true) < 0 && !this.allowed) {
        return this.allow();
      }
    };

    return Food;

  })();

  addFood = function(food) {
    var elem;
    elem = $("<div class='item' id='food-" + food.name + "'>" + food.name + "</div>");
    $("div#allowed").append(elem);
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Food, [food.name].concat(food.forbidden), function(){});
  };

  jQuery(function() {
    var allFoods, eatingClasses, ec, f, foods, forbiddenClasses, i, len;
    eatingClasses = ["Fruitarianism", "Gluten-free", "Hinduism", "Islam", "Judaism", "Mormonism", "Pescetarianism", "Veganism", "Vegetarianism"];
    for (i = 0, len = eatingClasses.length; i < len; i++) {
      ec = eatingClasses[i];
      addCheckbox(ec);
    }
    forbiddenClasses = [];
    foods = [
      {
        name: "Pork",
        forbidden: ["Fruitarianism, Judaism", "Islam", "Veganism", "Vegetarianism", "Pescetarianism"]
      }, {
        name: "Fish",
        forbidden: ["Fruitarianism", "Veganism", "Vegetarianism"]
      }, {
        name: "Milk",
        forbidden: ["Fruitarianism", "Veganism"]
      }, {
        name: "Cheese",
        forbidden: ["Fruitarianism", "Veganism"]
      }, {
        name: "Shellfish",
        forbidden: ["Fruitarianism", "Veganism", "Vegetarianism"]
      }, {
        name: "Alcohol",
        forbidden: ["Islam"]
      }
    ];
    allFoods = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = foods.length; j < len1; j++) {
        f = foods[j];
        results.push(addFood(f));
      }
      return results;
    })();
    return $("input.ec").click(function() {
      var className, j, len1, results;
      className = $(this).prop("name");
      if ($(this).prop("checked")) {
        forbiddenClasses.push(className);
      } else {
        forbiddenClasses = (function() {
          var j, len1, results;
          results = [];
          for (j = 0, len1 = forbiddenClasses.length; j < len1; j++) {
            ec = forbiddenClasses[j];
            if (ec !== className) {
              results.push(ec);
            }
          }
          return results;
        })();
      }
      results = [];
      for (j = 0, len1 = allFoods.length; j < len1; j++) {
        f = allFoods[j];
        results.push(f.check(forbiddenClasses));
      }
      return results;
    });
  });

}).call(this);
